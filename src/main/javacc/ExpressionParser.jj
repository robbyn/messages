options {
    STATIC = false;
    IGNORE_CASE = false;
}

PARSER_BEGIN(ExpressionParser)
package org.tastefuljava.messages.expr.impl;
import org.tastefuljava.messages.expr.Expression;
import org.tastefuljava.messages.expr.AbstractParser;
import org.tastefuljava.messages.expr.CompilationContext;
import java.io.InputStream;
import java.io.IOException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.List;
import java.util.ArrayList;
import org.tastefuljava.messages.type.Type;
import org.tastefuljava.messages.type.PrimitiveType;
import org.tastefuljava.messages.type.ClassType;
import org.tastefuljava.messages.type.ArrayType;
import org.tastefuljava.messages.type.ParameterizedType;
import org.tastefuljava.messages.type.TypeVariable;
import org.tastefuljava.messages.type.GenericContext;

public class ExpressionParser extends AbstractParser {
    @Override
    public Expression parseExpression() throws IOException {
        try {
            return expression();
        } catch (ParseException e) {
            throw new IOException(e.getMessage());
        }
    }

    @Override
    public Type parseType(GenericContext gc) throws IOException {
        try {
            return type(gc);
        } catch (ParseException e) {
            throw new IOException(e.getMessage());
        }
    }

    @Override
    public List<Type> parseParams(GenericContext gc) throws IOException {
        try {
            return parameters(gc);
        } catch (ParseException e) {
            throw new IOException(e.getMessage());
        }
    }

    @Override
    public int parseGenerics(GenericContext gc) throws IOException {
        try {
            return generics(gc);
        } catch (ParseException e) {
            throw new IOException(e.getMessage());
        }
    }
}
PARSER_END(ExpressionParser)

SKIP: {
    " " | "\t" | "\n" | "\r"
}

TOKEN : {
    < OR: "|" ("|")?  >
    | < AND: "&" ("&")? >
    | < EQ: "=" ("=")? >
    | < NE: "!=" >
    | < LT: "<" >
    | < LE: "<=" >
    | < GT: ">" >
    | < GE: ">=" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < TIMES: "*" >
    | < DIV: "/" >
    | < LPAR: "(" >
    | < RPAR: ")" >
    | < LINDEX: "[" >
    | < RINDEX: "]" >
    | < INTVAL: (["0"-"9"])+ >
    | < FLOATVAL: <INTVAL> "." (["0"-"9"])* | "." (["0"-"9"])+ >
    | < STRING:
        "\""
        (
            (~["\"","\\","\n","\r"])
        |
            "\\" ["n","t","b","r","f","\\","'","\""]
        )*
        "\""
    >
    | < DOT: "." >
    | < COMMA: "," >
    | < INTER: "?" >

    | < BOOL: "boolean" >
    | < CHAR: "char" >
    | < BYTE: "byte" >
    | < SHORT: "short" >
    | < INT: "int" >
    | < LONG: "long" >
    | < FLOAT: "float" >
    | < DOUBLE: "double" >

    | < ID: ["A"-"Z","a"-"z","_"] (["0"-"9","A"-"Z","a"-"z","_"])* >
}

Expression expression(): {
    Expression e, d;
} {
    e=simpleExpression()
    (
        <EQ> d=simpleExpression() {e = equal(e,d);}
    |   <NE> d=simpleExpression() {e = notEqual(e,d);}
    |   <LT> d=simpleExpression() {e = less(e,d);}
    |   <LE> d=simpleExpression() {e = lessEqual(e,d);}
    |   <GT> d=simpleExpression() {e = greater(e,d);}
    |   <GE> d=simpleExpression() {e = greaterEqual(e,d);}
    )?
    {return e;}
}

Expression simpleExpression(): {
    Expression e, d;
    boolean neg = false;
} {
    (<PLUS>|<MINUS> {neg=true;})?
    e=term()
    {if(neg){e = neg(e);}}
    (
        <PLUS> d=term() {e = add(e,d);}
    |   <MINUS> d=term() {e = sub(e,d);}
    |   <OR> d=term() {e = or(e,d);}
    )*
    {return e;}
}

Expression term(): {
    Expression e, d;
} {
    e=factor()
    (
        <TIMES> d=factor() {e = mul(e,d);}
    |   <DIV> d=factor() {e = div(e,d);}
    |   <AND> d=factor() {e = and(e,d);}
    )*
    {return e;}
}

Expression factor(): {
    Expression e;
    String s;
} {
    (   s=<INTVAL>.image {e = intNumber(Integer.parseInt(s));}
    |   s=<FLOATVAL>.image {e = floatNumber(Double.parseDouble(s));}
    |   s=<STRING>.image {e = string(s);}
    |   <LPAR> e=expression() <RPAR>
    |   s=<ID>.image {e = lookup(s);} (e=qualifier(e))*
    )
    {return e;}
}

Expression qualifier(Expression e): {
    Expression d;
    Expression[] parms;
    String s;
} {
    (
        <DOT> s=<ID>.image
        (
            parms=params() {e=invoke(e,s,parms);}
        |   {e=prop(e,s);}
        )
    |   <LINDEX> d=expression() <RINDEX> {e=index(e,d);}
    )
    {return e;}
}

Expression[] params(): {
    Expression e;
    List<Expression> parms = new ArrayList<Expression>();
} {
    <LPAR>
    (
        e=expression() {parms.add(e);}
        (<COMMA> e=expression() {parms.add(e);})*
    )?
    <RPAR>
    {return parms.toArray(new Expression[parms.size()]);}
}

Type type(GenericContext gc): {
    String s;
    Type t,k,e;
} {
    (
        <BOOL> {t=PrimitiveType.BOOLEAN;}
        | <CHAR> {t=PrimitiveType.CHAR;}
        | <BYTE> {t=PrimitiveType.BYTE;}
        | <SHORT> {t=PrimitiveType.SHORT;}
        | <INT> {t=PrimitiveType.INT;}
        | <LONG> {t=PrimitiveType.LONG;}
        | <FLOAT> {t=PrimitiveType.FLOAT;}
        | <DOUBLE> {t=PrimitiveType.DOUBLE;}
        | LOOKAHEAD( (<ID> (<DOT>|<LT>)) ) t=classType(gc)
        | t=varOrClassName(gc)
    )
    ( <LINDEX> <RINDEX> {t=new ArrayType(t);} )*
    {return t;}
}

Type classType(GenericContext gc): {
    ClassType c;
    Type t;
    String s;
    StringBuilder buf = new StringBuilder();
} {
    s=<ID>.image {buf.append(s);} (<DOT> s=<ID>.image {buf.append('.'); buf.append(s);})*
    {c=ClassType.fromName(buf.toString());}
    (t=paramType(gc,c)|{t=c;})
    {return t;}
}

Type varOrClassName(GenericContext gc): {
    ClassType c;
    Type t;
    String s;
    StringBuilder buf = new StringBuilder();
} {
    s=<ID>.image
    {
        t=gc.get(s);
        if (t == null) {
            t = ClassType.fromName(s);
        }
        return t;
    }
}

ParameterizedType paramType(GenericContext gc, ClassType c): {
    List<Type> args = new ArrayList<Type>();
    Type a;
} {
    <LT>
        a=actualType(gc) {args.add(a);}
        (<COMMA> a=actualType(gc) {args.add(a);})*
    <GT>
    {return new ParameterizedType(c,args.toArray(new Type[args.size()]));}
}

Type actualType(GenericContext gc): {
    Type t;
} {
    (<INTER> {t=gc.makeVariable();} | t=type(gc))
    {return t;}
}

List<Type> parameters(GenericContext gc): {
    Type t;
    List<Type> result = new ArrayList<Type>();
} {
    (
        t=parameter(gc) {result.add(t);}
        ( <COMMA> t=parameter(gc) {result.add(t);} )*
    )?
    {return result;}
}

Type parameter(GenericContext gc): {
    Type t;
    String s;
} {
    t=type(gc) s=<ID>.image
    {
        context.addVariable(s);
        return t;
    }
}

int generics(GenericContext gc): {
    int count = 0;
} {
    (
        generic(gc) {++count;}
        (<COMMA> generic(gc) {++count;})*
    )?
    {return count;}
}

TypeVariable generic(GenericContext gc): {
    String s;
    TypeVariable v;
} {
    s=<ID>.image {
        v=gc.makeVariable();
        gc.define(s,v);
        return v;
    }
}
